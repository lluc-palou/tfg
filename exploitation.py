from pyspark.sql.window import Window
from pyspark.sql import SparkSession, DataFrame
from pyspark.sql.functions import col, lead, log

# Initializes Spark session with MongoDB connector
jar_files_path = "file:///C:/Users/llucp/spark_jars/"

jar_files = [
    "mongo-spark-connector_2.12-10.1.1.jar",
    "mongodb-driver-core-4.10.1.jar",
    "mongodb-driver-sync-4.10.1.jar",
    "bson-4.10.1.jar"
]

MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "tfg"
FORMATTING_TRADE = "formatting_trade"
FORMATTING_LOB = "formatting_lob"
EXPLOITATION = "exploitation"

spark = (
    SparkSession.builder
    .appName("FormattedZone")
    .config("spark.jars", ",".join([jar_files_path + jar for jar in jar_files]))
    .config("spark.mongodb.read.connection.uri", MONGO_URI)
    .config("spark.mongodb.write.connection.uri", MONGO_URI)
    .config("spark.mongodb.read.database", DB_NAME)
    .config("spark.mongodb.write.database", DB_NAME)
    .config("spark.driver.memory", "4g")
    .getOrCreate()
)

spark.sparkContext.setLogLevel("ERROR")

def load_trade() -> DataFrame:
    """
    Loads formatting zone trade data and returns it as a dataframe.
    """
    trades = (
        spark.read.format("mongodb")
        .option("database", DB_NAME)
        .option("collection", FORMATTING_TRADE)
        .load()
    )

    return trades

def calculate_forward_log_returns(df: DataFrame, lag: int, N: int) -> DataFrame:
    """
    Calculates forward log returns of last traded price over N periods, accounting for a decision lag.
    """
    w = Window.orderBy("timestamp")
    base = lead(col("last_traded_price"), lag).over(w)
    future = lead(col("last_traded_price"), lag + N).over(w)

    return df.withColumn(f"fwd_logret_{N}", log(future) - log(base))

if __name__ == "__main__":
    trades = load_trade()
    trades = calculate_forward_log_returns(trades, 1, 5)
    trades = calculate_forward_log_returns(trades, 1, 10)
    (
        trades.dropna().orderBy(col("timestamp").desc())
        .limit(20)
        .orderBy(col("timestamp"))
        .show(truncate=False)
    )